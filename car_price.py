# -*- coding: utf-8 -*-
"""car_price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bkguMIB5abifSLdVxoC6rfEhj9lprBxg
"""

"""
DATASET:

This project uses data from [Hugging Face Datasets](https://huggingface.co/datasets):

[`jayaprakash-m/linearRegressionDS`](https://huggingface.co/datasets/jayaprakash-m/linearRegressionDS)

> Dataset includes specifications of used cars such as engine power, fuel type, seating capacity, etc.
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

#df = pd.read_csv("C:/Users/DELL/OneDrive/Desktop/after projects/proj-aki/car.csv")
df = pd.read_csv("hf://datasets/jayaprakash-m/linearRegressionDS/car.csv")
#print(df.columns)

#OneHot Encode:
one_hot_brand = pd.get_dummies(df['Make'], prefix='Make')
one_hot_Model = pd.get_dummies(df['Model'], prefix='Model')
one_hot_location = pd.get_dummies(df['Location'], prefix='Location')
one_hot_FuelType = pd.get_dummies(df['Fuel Type'], prefix='Fuel Type')
one_hot_Transmission = pd.get_dummies(df['Transmission'], prefix='Transmission')
one_hot_Color = pd.get_dummies(df['Color'], prefix='Color')
one_hot_Owner = pd.get_dummies(df['Owner'], prefix='Owner')
one_hot_SellerType = pd.get_dummies(df['Seller Type'], prefix='Seller Type')
one_hot_Drivetrain = pd.get_dummies(df['Drivetrain'], prefix='Drivetrain')

#for power
# Split it into two columns
df[['Power_bhp', 'Power_rpm']] = df['Max Power'].str.extract(r'(\d+(?:\.\d+)?)\s*bhp\s*@\s*(\d+(?:\.\d+)?)\s*rpm')
# Convert to numeric
df['Power_bhp'] = pd.to_numeric(df['Power_bhp'])
df['Power_rpm'] = pd.to_numeric(df['Power_rpm'])

#for torque
df[['torque_Nm', 'torque_rpm']] = df['Max Torque'].str.extract(r'(\d+(?:\.\d+)?)\s*Nm\s*@\s*(\d+(?:\.\d+)?)\s*rpm')
# Convert to numeric
df['torque_Nm'] = pd.to_numeric(df['torque_Nm'])
df['torque_rpm'] = pd.to_numeric(df['torque_rpm'])

#for engine
df['Engine_cc'] = df['Engine'].str.replace('cc', '').str.strip()
df['Engine_cc'] = pd.to_numeric(df['Engine_cc'])


df.drop(['Max Power', 'Max Torque', 'Engine'], axis=1, inplace=True)


#Combine all onehot columns into original dataframe
df = pd.concat([
    df,
    one_hot_brand,
    one_hot_Model,
    one_hot_FuelType,
    one_hot_Transmission,
    one_hot_location,
    one_hot_Color,
    one_hot_Owner,
    one_hot_SellerType,
    one_hot_Drivetrain
], axis=1)

# Drop original string columns
df.drop(['Make','Model','Location', 'Fuel Type', 'Transmission', 'Color',
         'Owner', 'Seller Type', 'Drivetrain'], axis=1, inplace=True)

#Handle missing values
df.dropna(inplace=True)


#Standardize numerical col
scaler = StandardScaler()

# Check actual numerical col that exist
num_cols = ['Price', 'Year', 'Kilometer', 'Engine_cc', 'Power_bhp',
            'Power_rpm', 'torque_Nm', 'torque_rpm', 'Length',
            'Width', 'Height', 'Seating Capacity', 'Fuel Tank Capacity']

# Keep numerical columns that actually exist
existing_num_cols = [col for col in num_cols if col in df.columns]

# Scale them
df[existing_num_cols] = scaler.fit_transform(df[existing_num_cols])

X = df.drop('Price', axis=1)
y = df['Price']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(64,activation='relu'),
    tf.keras.layers.Dense(32,activation='relu'),
    tf.keras.layers.Dense(1,activation='linear')  # linear activation for regression
])

# Compile model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# Train model
model.fit(X_train, y_train, epochs=100, verbose=2)

# Predict AND FLATTEN TO 2D
y_pred = model.predict(X_test).flatten()

# Evaluating performaNCE
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MSE: {mse:.2f}")
print(f"MAE: {mae:.2f}")
print(f"R²: {r2:.2f}")

#plotting
plt.figure(figsize=(6, 6))
plt.scatter(y_test, y_pred, alpha=0.5, color='blue', edgecolors='k')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual Price (₹ Lakhs)")
plt.ylabel("Predicted Price (₹ Lakhs)")
plt.title("Actual vs Predicted Car Price (₹)")
plt.grid(True)
plt.tight_layout()
plt.show()


model.save('car_price_model.h5')
